// Code generated by wunderctl. DO NOT EDIT.

import type {
	CountriesResponse,
	CountriesResponseData,
	CountryWeatherResponse,
	CountryWeatherInput,
	CountryWeatherResponseData,
	FakeProductsResponse,
	FakeProductsInput,
	FakeProductsResponseData,
	PriceUpdatesResponse,
	PriceUpdatesResponseData,
	SetPriceResponse,
	SetPriceInput,
	SetPriceResponseData,
	TopProductsResponse,
	TopProductsResponseData,
	UsersResponse,
	UsersResponseData,
} from "./models";
import { createContext } from "react";
import {
	QueryArgsWithInput,
	SubscriptionArgs,
	SubscriptionArgsWithInput,
	hooks,
	WunderGraphContextProperties,
	Client,
	User,
} from "@wundergraph/sdk/dist/nextjs";

export type Role = "admin" | "user";

export enum AuthProvider {
	"github" = "github",
}

export const AuthProviders = {
	github: AuthProvider.github,
};

const defaultWunderGraphContextProperties: WunderGraphContextProperties<Role> = {
	ssrCache: {},
	client: new Client({
		applicationHash: "5265da82",
		applicationPath: "api/main",
		baseURL: "http://localhost:9991",
		sdkVersion: "1.0.0-next.25",
	}),
	user: null,
	setUser: (value) => {},
	isWindowFocused: "pristine",
	setIsWindowFocused: (value) => {},
	refetchMountedOperations: 0,
	setRefetchMountedOperations: (value) => {},
};

export const WunderGraphContext = createContext<WunderGraphContextProperties<Role>>(
	defaultWunderGraphContextProperties
);

export const withWunderGraph = hooks.withWunderGraphContextWrapper(
	WunderGraphContext,
	defaultWunderGraphContextProperties
);

export const useWunderGraph = hooks.useWunderGraph(WunderGraphContext);

export const useQuery = {
	CountryWeather: (args: QueryArgsWithInput<CountryWeatherInput>) =>
		hooks.useQueryWithInput<CountryWeatherInput, CountryWeatherResponseData, Role>(WunderGraphContext, {
			operationName: "CountryWeather",
			requiresAuthentication: false,
		})(args),
	FakeProducts: (args: QueryArgsWithInput<FakeProductsInput>) =>
		hooks.useQueryWithInput<FakeProductsInput, FakeProductsResponseData, Role>(WunderGraphContext, {
			operationName: "FakeProducts",
			requiresAuthentication: false,
		})(args),
	Countries: hooks.useQueryWithoutInput<CountriesResponseData, Role>(WunderGraphContext, {
		operationName: "Countries",
		requiresAuthentication: false,
	}),
	TopProducts: hooks.useQueryWithoutInput<TopProductsResponseData, Role>(WunderGraphContext, {
		operationName: "TopProducts",
		requiresAuthentication: false,
	}),
	Users: hooks.useQueryWithoutInput<UsersResponseData, Role>(WunderGraphContext, {
		operationName: "Users",
		requiresAuthentication: false,
	}),
};

export const useMutation = {
	SetPrice: () =>
		hooks.useMutationWithInput<SetPriceInput, SetPriceResponseData, Role>(WunderGraphContext, {
			operationName: "SetPrice",
			requiresAuthentication: false,
		}),
};

export const useSubscription = {
	PriceUpdates: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<PriceUpdatesResponseData, Role>(WunderGraphContext, {
			operationName: "PriceUpdates",
			isLiveQuery: false,
			requiresAuthentication: true,
		})(args),
};

export const useLiveQuery = {
	CountryWeather: (args: SubscriptionArgsWithInput<CountryWeatherInput>) =>
		hooks.useSubscriptionWithInput<CountryWeatherInput, CountryWeatherResponseData, Role>(WunderGraphContext, {
			operationName: "CountryWeather",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	FakeProducts: (args: SubscriptionArgsWithInput<FakeProductsInput>) =>
		hooks.useSubscriptionWithInput<FakeProductsInput, FakeProductsResponseData, Role>(WunderGraphContext, {
			operationName: "FakeProducts",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	Countries: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<CountriesResponseData, Role>(WunderGraphContext, {
			operationName: "Countries",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	TopProducts: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<TopProductsResponseData, Role>(WunderGraphContext, {
			operationName: "TopProducts",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
	Users: (args?: SubscriptionArgs) =>
		hooks.useSubscriptionWithoutInput<UsersResponseData, Role>(WunderGraphContext, {
			operationName: "Users",
			isLiveQuery: true,
			requiresAuthentication: false,
		})(args),
};
