directive @fromClaim(name: Claim) on VARIABLE_DEFINITION

directive @hooksVariable on VARIABLE_DEFINITION

directive @jsonSchema(
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  title: String
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  description: String
  """
  The value of "multipleOf" MUST be a number, strictly greater than 0.
  
  A numeric instance is valid only if division by this keyword's value
  results in an integer.
  """
  multipleOf: Int
  """
  The value of "maximum" MUST be a number, representing an inclusive
  upper limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is less than or exactly equal to "maximum".
  """
  maximum: Int
  """
  The value of "exclusiveMaximum" MUST be number, representing an
  exclusive upper limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly less than (not equal to) "exclusiveMaximum".
  """
  exclusiveMaximum: Int
  """
  The value of "minimum" MUST be a number, representing an inclusive
  lower limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is greater than or exactly equal to "minimum".
  """
  minimum: Int
  """
  The value of "exclusiveMinimum" MUST be number, representing an
  exclusive lower limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly greater than (not equal to) "exclusiveMinimum".
  """
  exclusiveMinimum: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is less
  than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  """
  maxLength: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is
  greater than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minLength: Int
  """
  The value of this keyword MUST be a string.  This string SHOULD be a
  valid regular expression, according to the ECMA 262 regular
  expression dialect.
  
  A string instance is considered valid if the regular expression
  matches the instance successfully.  Recall: regular expressions are
  not implicitly anchored.
  """
  pattern: String
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "maxItems" if its size is less
  than, or equal to, the value of this keyword.
  """
  maxItems: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "minItems" if its size is greater
  than, or equal to, the value of this keyword.
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this keyword MUST be a boolean.
  
  If this keyword has boolean value false, the instance validates
  successfully.  If it has boolean value true, the instance validates
  successfully if all of its elements are unique.
  
  Omitting this keyword has the same behavior as a value of false.
  """
  uniqueItems: Boolean
  commonPattern: COMMON_REGEX_PATTERN
) on VARIABLE_DEFINITION

"""
The directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.
This variable MUST be a string compatible scalar. 

The default format, is: ISO 8601
If no format is chosen, the default format is used.
Custom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.
"""
directive @injectCurrentDateTime(
  format: WunderGraphDateTimeFormat = ISO8601
  """customFormat must conform to the Golang specification for specifying a date time format"""
  customFormat: String
) on VARIABLE_DEFINITION

"""
The directive @injectGeneratedUUID injects a generated UUID into the variable.
This variable MUST be a string.
At the same time, it removes the variable from the input definition,
disallowing the user to supply it.

This means, the UUID is 100% generated server-side and can be considered untempered.
"""
directive @injectGeneratedUUID on VARIABLE_DEFINITION

"""
The @internalOperation Directive marks an Operation as internal.
By doing so, the Operation is no longer accessible from the public API.
It can only be accessed by internal services, like hooks.
"""
directive @internalOperation on QUERY | MUTATION | SUBSCRIPTION

directive @cacheControl(maxAge: Int, scope: CacheControlScope_countries) on FIELD_DEFINITION | OBJECT | INTERFACE

directive @rbac(
  """the user must match all roles"""
  requireMatchAll: [WG_ROLE]
  """the user must match at least one of the roles"""
  requireMatchAny: [WG_ROLE]
  """the user must not match all of the roles"""
  denyMatchAll: [WG_ROLE]
  """the user must not match any of the roles"""
  denyMatchAny: [WG_ROLE]
) on QUERY | MUTATION | SUBSCRIPTION

union _Entity_federated = User_federated | Product_federated | Review_federated

type _Service_federated {
  sdl: String
}

scalar _Any

type Query {
  federated_me: User_federated
  federated__entities(representations: [_Any!]!): [_Entity_federated]!
  federated__service: _Service_federated!
  federated_topProducts(first: Int = 5): [Product_federated]
  countries_continents(filter: ContinentFilterInput_countries): [Continent_countries!]!
  countries_continent(code: ID!): Continent_countries
  countries_countries(filter: CountryFilterInput_countries): [Country_countries!]!
  countries_country(code: ID!): Country_countries
  countries_languages(filter: LanguageFilterInput_countries): [Language_countries!]!
  countries_language(code: ID!): Language_countries
  jsp_posts: [Post_jsp]
  jsp_postComments(postID: String!): [Comment_jsp]
  jsp_users: [User_jsp]
  jsp_userPosts(userID: String!): [Post_jsp]
}

type Entity_federated {
  findUserByID(id: ID!): User_federated!
  findProductByUpc(upc: String!): Product_federated!
  findReviewByID(id: ID!): Review_federated!
}

type User_federated {
  id: ID!
  name: String
  username: String
  reviews: [Review_federated]
}

scalar _FieldSet_federated

type Review_federated {
  id: ID!
  body: String
  author: User_federated
  product: Product_federated
}

type Product_federated {
  upc: String!
  reviews: [Review_federated]
  name: String
  price: Int
  weight: Int
  inStock: Boolean
  shippingEstimate: Int
}

type Mutation {
  federated_setPrice(upc: String!, price: Int!): Product_federated
}

type Subscription {
  federated_updatedPrice: Product_federated!
}

enum Claim {
  EMAIL
  EMAIL_VERIFIED
  NAME
  NICKNAME
  LOCATION
  PROVIDER
}

enum COMMON_REGEX_PATTERN {
  EMAIL
  DOMAIN
}

enum WunderGraphDateTimeFormat {
  """2006-01-02T15:04:05-0700"""
  ISO8601
  """Mon Jan _2 15:04:05 2006"""
  ANSIC
  """Mon Jan _2 15:04:05 MST 2006"""
  UnixDate
  """Mon Jan 02 15:04:05 -0700 2006"""
  RubyDate
  """02 Jan 06 15:04 MST"""
  RFC822
  """02 Jan 06 15:04 -0700"""
  RFC822Z
  """Monday, 02-Jan-06 15:04:05 MST"""
  RFC850
  """Mon, 02 Jan 2006 15:04:05 MST"""
  RFC1123
  """Mon, 02 Jan 2006 15:04:05 -0700"""
  RFC1123Z
  """2006-01-02T15:04:05Z07:00"""
  RFC3339
  """2006-01-02T15:04:05.999999999Z07:00"""
  RFC3339Nano
  """3:04PM"""
  Kitchen
  """Jan _2 15:04:05"""
  Stamp
  """Jan _2 15:04:05.000"""
  StampMilli
  """Jan _2 15:04:05.000000"""
  StampMicro
  """Jan _2 15:04:05.000000000"""
  StampNano
}

input ContinentFilterInput_countries {
  code: StringQueryOperatorInput_countries
}

input StringQueryOperatorInput_countries {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

type Continent_countries {
  code: ID!
  name: String!
  countries: [Country_countries!]!
}

type Country_countries {
  code: ID!
  name: String!
  native: String!
  phone: String!
  continent: Continent_countries!
  capital: String
  currency: String
  languages: [Language_countries!]!
  emoji: String!
  emojiU: String!
  states: [State_countries!]!
}

type Language_countries {
  code: ID!
  name: String
  native: String
  rtl: Boolean!
}

type State_countries {
  code: String
  name: String!
  country: Country_countries!
}

input CountryFilterInput_countries {
  code: StringQueryOperatorInput_countries
  currency: StringQueryOperatorInput_countries
  continent: StringQueryOperatorInput_countries
}

input LanguageFilterInput_countries {
  code: StringQueryOperatorInput_countries
}

enum CacheControlScope_countries {
  PUBLIC
  PRIVATE
}

scalar Upload_countries

type Post_jsp {
  id: Int
  userId: Int
  title: String
  body: String
  comments: [Comment_jsp]
}

type Comment_jsp {
  id: Int
  name: String
  email: String
  body: String
  postId: Int
}

type User_jsp {
  id: Int
  name: String
  username: String
  email: String
  address: Address_jsp
  phone: String
  website: String
  company: Company_jsp
  posts: [Post_jsp]
}

type Address_jsp {
  street: String
  suite: String
  city: String
  zipcode: String
  geo: Geo_jsp
}

type Geo_jsp {
  lat: String
  lng: String
}

type Company_jsp {
  name: String
  catchPhrase: String
  bs: String
}

enum WG_ROLE {
  admin
  user
}
