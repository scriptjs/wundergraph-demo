# Code generated by "wunderctl"; DO NOT EDIT.

directive @fromClaim(name: Claim) on VARIABLE_DEFINITION

directive @hooksVariable on VARIABLE_DEFINITION

directive @jsonSchema(
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  title: String
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  description: String
  """
  The value of "multipleOf" MUST be a number, strictly greater than 0.
  
  A numeric instance is valid only if division by this keyword's value
  results in an integer.
  """
  multipleOf: Int
  """
  The value of "maximum" MUST be a number, representing an inclusive
  upper limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is less than or exactly equal to "maximum".
  """
  maximum: Int
  """
  The value of "exclusiveMaximum" MUST be number, representing an
  exclusive upper limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly less than (not equal to) "exclusiveMaximum".
  """
  exclusiveMaximum: Int
  """
  The value of "minimum" MUST be a number, representing an inclusive
  lower limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is greater than or exactly equal to "minimum".
  """
  minimum: Int
  """
  The value of "exclusiveMinimum" MUST be number, representing an
  exclusive lower limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly greater than (not equal to) "exclusiveMinimum".
  """
  exclusiveMinimum: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is less
  than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  """
  maxLength: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is
  greater than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minLength: Int
  """
  The value of this keyword MUST be a string.  This string SHOULD be a
  valid regular expression, according to the ECMA 262 regular
  expression dialect.
  
  A string instance is considered valid if the regular expression
  matches the instance successfully.  Recall: regular expressions are
  not implicitly anchored.
  """
  pattern: String
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "maxItems" if its size is less
  than, or equal to, the value of this keyword.
  """
  maxItems: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "minItems" if its size is greater
  than, or equal to, the value of this keyword.
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this keyword MUST be a boolean.
  
  If this keyword has boolean value false, the instance validates
  successfully.  If it has boolean value true, the instance validates
  successfully if all of its elements are unique.
  
  Omitting this keyword has the same behavior as a value of false.
  """
  uniqueItems: Boolean
  commonPattern: COMMON_REGEX_PATTERN
) on VARIABLE_DEFINITION

"""
The directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.
This variable MUST be a string compatible scalar. 

The default format, is: ISO 8601
If no format is chosen, the default format is used.
Custom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.
"""
directive @injectCurrentDateTime(
  format: WunderGraphDateTimeFormat = ISO8601
  """customFormat must conform to the Golang specification for specifying a date time format"""
  customFormat: String
) on VARIABLE_DEFINITION

"""
The directive @injectGeneratedUUID injects a generated UUID into the variable.
This variable MUST be a string.
At the same time, it removes the variable from the input definition,
disallowing the user to supply it.

This means, the UUID is 100% generated server-side and can be considered untempered.
"""
directive @injectGeneratedUUID on VARIABLE_DEFINITION

"""
The @internalOperation Directive marks an Operation as internal.
By doing so, the Operation is no longer accessible from the public API.
It can only be accessed by internal services, like hooks.
"""
directive @internalOperation on QUERY | MUTATION | SUBSCRIPTION

"""The directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition."""
directive @injectEnvironmentVariable(name: String!) on VARIABLE_DEFINITION

"""
The @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.
As the execution is depth first, a field can only be used after it has been exported.
Additionally, a field can only be used after using the '_join' field or on a different data source.
It's not possible to export a field and use it in for the same data source.

Note that the @export directive only works on fields that return a single value.
It's not possible to export a list or object field.
"""
directive @export(
  """The argument 'as' is the name of the variable to export the field to."""
  as: String!
) on FIELD

"""
The directive @internal marks a variable definition as internal so that clients can't access it.
The field is also not visible in the public API.
It's only being used as an internal variable to export fields into.
"""
directive @internal on VARIABLE_DEFINITION

"""
The @transform directive allows to apply transformations to the response.
By applying the directive, the shape of the response can be altered,
which will also modify the JSON-Schema of the response.
That is, you will keep full type safety and code-generation for transformed fields.
"""
directive @transform(
  """
  Using the 'get' transformation allows you to extract a nested field using a JSON path.
  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.
  
  Example:
  
  query GetName {
      name: me @transform(get: "info.name") {
          info {
              name
          }
      }
  }
  
  Before the transformation, the resolve looks like this:
  
  {
      "name": {
          "info": {
              "name": "John Doe"
          }
      }
  }
  
  With the transformation applied, the response will be reshaped like this:
  
  {
      "name": "John Doe"
  }
  """
  get: String
) on FIELD

directive @weather_cacheControl(maxAge: Int, scope: weather_CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

directive @rbac(
  """the user must match all roles"""
  requireMatchAll: [WG_ROLE]
  """the user must match at least one of the roles"""
  requireMatchAny: [WG_ROLE]
  """the user must not match all of the roles"""
  denyMatchAll: [WG_ROLE]
  """the user must not match any of the roles"""
  denyMatchAny: [WG_ROLE]
) on QUERY | MUTATION | SUBSCRIPTION

type Query {
  federated_me: federated_User
  federated_topProducts(first: Int = 5): [federated_Product]
  countries_countries(filter: countries_CountryFilterInput): [countries_Country!]!
  countries_country(code: ID!): countries_Country
  countries_continents(filter: countries_ContinentFilterInput): [countries_Continent!]!
  countries_continent(code: ID!): countries_Continent
  countries_languages(filter: countries_LanguageFilterInput): [countries_Language!]!
  countries_language(code: ID!): countries_Language
  jsp_posts: [jsp_Post]
  jsp_postComments(postID: String!): [jsp_Comment]
  jsp_users: [jsp_User]
  jsp_userPosts(userID: String!): [jsp_Post]
  weather_getCityByName(name: String!, country: String, config: weather_ConfigInput): weather_City
  weather_getCityById(id: [String!], config: weather_ConfigInput): [weather_City]
}

type federated_User {
  id: ID!
  name: String
  username: String
  reviews: [federated_Review]
  _join: Query!
}

type federated_Review {
  id: ID!
  body: String
  author: federated_User
  product: federated_Product
  _join: Query!
}

type federated_Product {
  upc: String!
  reviews: [federated_Review]
  name: String
  price: Int
  weight: Int
  inStock: Boolean
  shippingEstimate: Int
  _join: Query!
}

type Subscription {
  federated_updatedPrice: federated_Product!
}

type Mutation {
  federated_setPrice(upc: String!, price: Int!): federated_Product
}

enum Claim {
  EMAIL
  EMAIL_VERIFIED
  NAME
  NICKNAME
  LOCATION
  PROVIDER
}

enum COMMON_REGEX_PATTERN {
  EMAIL
  DOMAIN
}

enum WunderGraphDateTimeFormat {
  """2006-01-02T15:04:05-0700"""
  ISO8601
  """Mon Jan _2 15:04:05 2006"""
  ANSIC
  """Mon Jan _2 15:04:05 MST 2006"""
  UnixDate
  """Mon Jan 02 15:04:05 -0700 2006"""
  RubyDate
  """02 Jan 06 15:04 MST"""
  RFC822
  """02 Jan 06 15:04 -0700"""
  RFC822Z
  """Monday, 02-Jan-06 15:04:05 MST"""
  RFC850
  """Mon, 02 Jan 2006 15:04:05 MST"""
  RFC1123
  """Mon, 02 Jan 2006 15:04:05 -0700"""
  RFC1123Z
  """2006-01-02T15:04:05Z07:00"""
  RFC3339
  """2006-01-02T15:04:05.999999999Z07:00"""
  RFC3339Nano
  """3:04PM"""
  Kitchen
  """Jan _2 15:04:05"""
  Stamp
  """Jan _2 15:04:05.000"""
  StampMilli
  """Jan _2 15:04:05.000000"""
  StampMicro
  """Jan _2 15:04:05.000000000"""
  StampNano
}

type countries_Country {
  code: ID!
  name: String!
  native: String!
  phone: String!
  continent: countries_Continent!
  capital: String
  currency: String
  languages: [countries_Language!]!
  emoji: String!
  emojiU: String!
  states: [countries_State!]!
  _join: Query!
}

type countries_Continent {
  code: ID!
  name: String!
  countries: [countries_Country!]!
  _join: Query!
}

type countries_Language {
  code: ID!
  name: String
  native: String
  rtl: Boolean!
  _join: Query!
}

type countries_State {
  code: String
  name: String!
  country: countries_Country!
  _join: Query!
}

input countries_StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input countries_CountryFilterInput {
  code: countries_StringQueryOperatorInput
  currency: countries_StringQueryOperatorInput
  continent: countries_StringQueryOperatorInput
}

input countries_ContinentFilterInput {
  code: countries_StringQueryOperatorInput
}

input countries_LanguageFilterInput {
  code: countries_StringQueryOperatorInput
}

type jsp_Post {
  id: Int
  userId: Int
  title: String
  body: String
  _join: Query!
}

type jsp_Comment {
  id: Int
  name: String
  email: String
  body: String
  postId: Int
  _join: Query!
}

type jsp_User {
  id: Int
  name: String
  username: String
  email: String
  address: jsp_Address
  phone: String
  website: String
  company: jsp_Company
  _join: Query!
}

type jsp_Address {
  street: String
  suite: String
  city: String
  zipcode: String
  geo: jsp_Geo
  _join: Query!
}

type jsp_Geo {
  lat: String
  lng: String
  _join: Query!
}

type jsp_Company {
  name: String
  catchPhrase: String
  bs: String
  _join: Query!
}

type weather_City {
  id: ID
  name: String
  country: String
  coord: weather_Coordinates
  weather: weather_Weather
  _join: Query!
}

type weather_Coordinates {
  lon: Float
  lat: Float
  _join: Query!
}

type weather_Summary {
  title: String
  description: String
  icon: String
  _join: Query!
}

type weather_Temperature {
  actual: Float
  feelsLike: Float
  min: Float
  max: Float
  _join: Query!
}

type weather_Wind {
  speed: Float
  deg: Int
  _join: Query!
}

type weather_Clouds {
  all: Int
  visibility: Int
  humidity: Int
  _join: Query!
}

type weather_Weather {
  summary: weather_Summary
  temperature: weather_Temperature
  wind: weather_Wind
  clouds: weather_Clouds
  timestamp: Int
  _join: Query!
}

input weather_ConfigInput {
  units: weather_Unit
  lang: weather_Language
}

enum weather_Unit {
  metric
  imperial
  kelvin
}

enum weather_Language {
  af
  al
  ar
  az
  bg
  ca
  cz
  da
  de
  el
  en
  eu
  fa
  fi
  fr
  gl
  he
  hi
  hr
  hu
  id
  it
  ja
  kr
  la
  lt
  mk
  no
  nl
  pl
  pt
  pt_br
  ro
  ru
  sv
  se
  sk
  sl
  sp
  es
  sr
  th
  tr
  ua
  uk
  vi
  zh_cn
  zh_tw
  zu
}

enum weather_CacheControlScope {
  PUBLIC
  PRIVATE
}

"""The `Upload` scalar type represents a file upload."""
scalar weather_Upload

enum WG_ROLE {
  admin
  user
}
